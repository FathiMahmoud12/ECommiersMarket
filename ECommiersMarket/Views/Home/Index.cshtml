@{
    ViewBag.Title = "Home Page";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    .drop-zone {
        width: 400px;
        height: 300px;
        border: 2px dashed #ccc;
        text-align: center;
        padding: 20px;
        background-color: #f7f7f7;
    }

    .drop-button {
        display: inline-block;
        padding: 15px 30px;
        border-radius: 4px;
        background-color: #4285f4;
        color: #fff;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

        .drop-button:hover {
            background-color: #3367d6;
        }

    .button-text {
        font-size: 16px;
    }

    .image-preview {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        margin-top: 20px;
    }

        .image-preview img {
            width: 100px;
            height: 100px;
            object-fit: cover;
            margin: 5px;
            border-radius: 4px;
        }
</style>
<div id="drop-zone" class="drop-zone">
    <p class="drop-message">Drop images here</p>
    <input type="file" id="file-input" multiple >
    <div id="image-preview" class="image-preview"></div>
</div>



@section scripts

{
    <script>

        const dropZone = document.getElementById('drop-zone');
        const imagePreview = document.getElementById('image-preview');
        const fileInput = document.getElementById('file-input');

        dropZone.addEventListener('dragover', (e) => {
            e.preventDefault();
            dropZone.classList.add('drag-over');
        });

        dropZone.addEventListener('dragleave', () => {
            dropZone.classList.remove('drag-over');
        });

        dropZone.addEventListener('drop', (e) => {
            e.preventDefault();
            dropZone.classList.remove('drag-over');

            const files = e.dataTransfer.files;
            handleFiles(files);
        });

        fileInput.addEventListener('change', (e) => {
            const files = e.target.files;
            handleFiles(files);
        });

        function handleFiles(files) {
            const imageFiles = filterImageFiles(files);

            for (let i = 0; i < imageFiles.length; i++) {
                const file = imageFiles[i];
                const reader = new FileReader();

                reader.onload = function () {
                    const imageUrl = reader.result;
                    const imgElement = document.createElement('img');
                    imgElement.src = imageUrl;
                    imagePreview.appendChild(imgElement);
                };

                reader.readAsDataURL(file);
            }
        }

        function filterImageFiles(files) {
            return Array.from(files).filter(file => file.type.startsWith('image/'));
        }


    </script>
}